C51 COMPILER V9.60.0.0   UART                                                              12/16/2020 12:57:09 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN ..\hex\UART.obj
COMPILER INVOKED BY: E:\Keil\Keil_v5\C51\BIN\C51.EXE ..\SCR\UART.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\SCR) DEBUG O
                    -BJECTEXTEND PRINT(.\UART.lst) TABS(2) OBJECT(..\hex\UART.obj)

line level    source

   1          #include "uart.h"
   2          
   3          #define NONE_PARITY     0       //无校验
   4          #define ODD_PARITY      1       //奇校验
   5          #define EVEN_PARITY     2       //偶校验
   6          #define MARK_PARITY     3       //标记校验
   7          #define SPACE_PARITY    4       //空白校验
   8          
   9          #define PARITYBIT EVEN_PARITY   //定义校验位
  10          
  11          #define S1_S0 0x40              //P_SW1.6
  12          #define S1_S1 0x80              //P_SW1.7
  13          
  14          #define S2RI  0x01              //S2CON.0
  15          #define S2TI  0x02              //S2CON.1
  16          #define S2RB8 0x04              //S2CON.2
  17          #define S2TB8 0x08              //S2CON.3
  18          #define S2_S0 0x01              //P_SW2.0
  19          
  20          #define S3RI  0x01              //S3CON.0
  21          #define S3TI  0x02              //S3CON.1
  22          #define S3RB8 0x04              //S3CON.2
  23          #define S3TB8 0x08              //S3CON.3
  24          #define S3_S0 0x02              //P_SW2.1
  25          
  26          #define S4RI  0x01              //S4CON.0
  27          #define S4TI  0x02              //S4CON.1
  28          #define S4RB8 0x04              //S4CON.2
  29          #define S4TB8 0x08              //S4CON.3
  30          #define S4_S0 0x04              //P_SW2.2
  31          
  32          bit busy;
  33          
  34          void Uart1_init(void)
  35          {
  36   1          ACC = P_SW1;
  37   1          ACC &= ~(S1_S0 | S1_S1);    //S1_S0=0 S1_S1=0
  38   1          P_SW1 = ACC;                //(P3.0/RxD, P3.1/TxD)
  39   1          
  40   1      //  ACC = P_SW1;
  41   1      //  ACC &= ~(S1_S0 | S1_S1);    //S1_S0=1 S1_S1=0
  42   1      //  ACC |= S1_S0;               //(P3.6/RxD_2, P3.7/TxD_2)
  43   1      //  P_SW1 = ACC;  
  44   1      //  
  45   1      //  ACC = P_SW1;
  46   1      //  ACC &= ~(S1_S0 | S1_S1);    //S1_S0=0 S1_S1=1
  47   1      //  ACC |= S1_S1;               //(P1.6/RxD_3, P1.7/TxD_3)
  48   1      //  P_SW1 = ACC;  
  49   1      
  50   1      #if (PARITYBIT == NONE_PARITY)
                  SCON = 0x50;                //8位可变波特率
              #elif (PARITYBIT == ODD_PARITY) || (PARITYBIT == EVEN_PARITY) || (PARITYBIT == MARK_PARITY)
  53   1          SCON = 0xda;                //9位可变波特率,校验位初始为1
  54   1      #elif (PARITYBIT == SPACE_PARITY)
C51 COMPILER V9.60.0.0   UART                                                              12/16/2020 12:57:09 PAGE 2   

                  SCON = 0xd2;                //9位可变波特率,校验位初始为0
              #endif
  57   1      
  58   1          AUXR = 0x40;                //定时器1为1T模式
  59   1          TMOD = 0x00;                //定时器1为模式0(16位自动重载)
  60   1          TL1 = (65536 - (FOSC/4/BAUD));   //设置波特率重装值
  61   1          TH1 = (65536 - (FOSC/4/BAUD))>>8;
  62   1          TR1 = 1;                    //定时器1开始启动
  63   1          ES = 1;                     //使能串口中断
  64   1          EA = 1;
  65   1      }
  66          
  67          /*----------------------------
  68          UART 中断服务程序
  69          -----------------------------*/
  70          void Uart() interrupt 4 using 1
  71          {
  72   1          if (RI)
  73   1          {
  74   2              RI = 0;                 //清除RI位
  75   2              P0 = SBUF;              //P0显示串口数据
  76   2              P22 = RB8;              //P2.2显示校验位
  77   2          }
  78   1          if (TI)
  79   1          {
  80   2              TI = 0;                 //清除TI位
  81   2              busy = 0;               //清忙标志
  82   2          }
  83   1      }
  84          
  85          /*----------------------------
  86          发送串口数据
  87          ----------------------------*/
  88          void Uart1_SendData(BYTE dat)
  89          {
  90   1          while (busy);               //等待前面的数据发送完成
  91   1          ACC = dat;                  //获取校验位P (PSW.0)
  92   1          if (P)                      //根据P来设置校验位
  93   1          {
  94   2      #if (PARITYBIT == ODD_PARITY)
                      TB8 = 0;                //设置校验位为0
              #elif (PARITYBIT == EVEN_PARITY)
  97   2              TB8 = 1;                //设置校验位为1
  98   2      #endif
  99   2          }
 100   1          else
 101   1          {
 102   2      #if (PARITYBIT == ODD_PARITY)
                      TB8 = 1;                //设置校验位为1
              #elif (PARITYBIT == EVEN_PARITY)
 105   2              TB8 = 0;                //设置校验位为0
 106   2      #endif
 107   2          }
 108   1          busy = 1;
 109   1          SBUF = ACC;                 //写数据到UART数据寄存器
 110   1      }
 111          
 112          /*----------------------------
 113          发送字符串
 114          ----------------------------*/
 115          void Uart1_SendString(char *s)
 116          {
C51 COMPILER V9.60.0.0   UART                                                              12/16/2020 12:57:09 PAGE 3   

 117   1          while (*s)                  //检测字符串结束标志
 118   1          {
 119   2              Uart1_SendData(*s++);         //发送当前字符
 120   2          }
 121   1      }
 122          
 123          /*---------------------------------------------------------------------*/
 124          void Uart2_init(void)
 125          {
 126   1          P_SW2 &= ~S2_S0;            //S2_S0=0 (P1.0/RxD2, P1.1/TxD2)
 127   1      //  P_SW2 |= S2_S0;             //S2_S0=1 (P4.6/RxD2_2, P4.7/TxD2_2)
 128   1      
 129   1      #if (PARITYBIT == NONE_PARITY)
                  S2CON = 0x50;               //8位可变波特率
              #elif (PARITYBIT == ODD_PARITY) || (PARITYBIT == EVEN_PARITY) || (PARITYBIT == MARK_PARITY)
 132   1          S2CON = 0xda;               //9位可变波特率,校验位初始为1
 133   1      #elif (PARITYBIT == SPACE_PARITY)
                  S2CON = 0xd2;               //9位可变波特率,校验位初始为0
              #endif
 136   1      
 137   1          T2L = (65536 - (FOSC/4/BAUD));   //设置波特率重装值
 138   1          T2H = (65536 - (FOSC/4/BAUD))>>8;
 139   1          AUXR = 0x14;                //T2为1T模式, 并启动定时器2
 140   1          IE2 = 0x01;                 //使能串口2中断
 141   1          EA = 1;
 142   1      }
 143          
 144          /*----------------------------
 145          UART2 中断服务程序
 146          -----------------------------*/
 147          void Uart2() interrupt 8 using 1
 148          {
 149   1          if (S2CON & S2RI)
 150   1          {
 151   2              S2CON &= ~S2RI;         //清除S2RI位
 152   2              P0 = S2BUF;             //P0显示串口数据
 153   2              P2 = (S2CON & S2RB8);   //P2.2显示校验位
 154   2          }
 155   1          if (S2CON & S2TI)
 156   1          {
 157   2              S2CON &= ~S2TI;         //清除S2TI位
 158   2              busy = 0;               //清忙标志
 159   2          }
 160   1      }
 161          
 162          /*----------------------------
 163          发送串口数据
 164          ----------------------------*/
 165          void Uart2_SendData(BYTE dat)
 166          {
 167   1          while (busy);               //等待前面的数据发送完成
 168   1          ACC = dat;                  //获取校验位P (PSW.0)
 169   1          if (P)                      //根据P来设置校验位
 170   1          {
 171   2      #if (PARITYBIT == ODD_PARITY)
                      S2CON &= ~S2TB8;        //设置校验位为0
              #elif (PARITYBIT == EVEN_PARITY)
 174   2              S2CON |= S2TB8;         //设置校验位为1
 175   2      #endif
 176   2          }
 177   1          else
 178   1          {
C51 COMPILER V9.60.0.0   UART                                                              12/16/2020 12:57:09 PAGE 4   

 179   2      #if (PARITYBIT == ODD_PARITY)
                      S2CON |= S2TB8;         //设置校验位为1
              #elif (PARITYBIT == EVEN_PARITY)
 182   2              S2CON &= ~S2TB8;        //设置校验位为0
 183   2      #endif
 184   2          }
 185   1          busy = 1;
 186   1          S2BUF = ACC;                //写数据到UART2数据寄存器
 187   1      }
 188          
 189          /*----------------------------
 190          发送字符串
 191          ----------------------------*/
 192          void Uart2_SendString(char *s)
 193          {
 194   1          while (*s)                  //检测字符串结束标志
 195   1          {
 196   2              Uart2_SendData(*s++);         //发送当前字符
 197   2          }
 198   1      }
 199          
 200          
 201          /*---------------------------------------------------------------------*/
 202          void Uart3_init(void)
 203          {
 204   1          P_SW2 &= ~S3_S0;            //S3_S0=0 (P0.0/RxD3, P0.1/TxD3)
 205   1      //  P_SW2 |= S3_S0;             //S3_S0=1 (P5.0/RxD3_2, P5.1/TxD3_2)
 206   1      
 207   1      #if (PARITYBIT == NONE_PARITY)
                  S3CON = 0x10;               //8位可变波特率
              #elif (PARITYBIT == ODD_PARITY) || (PARITYBIT == EVEN_PARITY) || (PARITYBIT == MARK_PARITY)
 210   1          S3CON = 0x9a;               //9位可变波特率,校验位初始为1
 211   1      #elif (PARITYBIT == SPACE_PARITY)
                  S3CON = 0x92;               //9位可变波特率,校验位初始为0
              #endif
 214   1      
 215   1          T2L = (65536 - (FOSC/4/BAUD));   //设置波特率重装值
 216   1          T2H = (65536 - (FOSC/4/BAUD))>>8;
 217   1          AUXR = 0x14;                //T2为1T模式, 并启动定时器2
 218   1          IE2 = 0x08;                 //使能串口3中断
 219   1          EA = 1;
 220   1      }
 221          
 222          /*----------------------------
 223          UART3 中断服务程序
 224          -----------------------------*/
 225          void Uart3() interrupt 17 using 1
 226          {
 227   1          if (S3CON & S3RI)
 228   1          {
 229   2              S3CON &= ~S3RI;         //清除S3RI位
 230   2              P0 = S3BUF;             //P0显示串口数据
 231   2              P2 = (S3CON & S3RB8);   //P2.2显示校验位
 232   2          }
 233   1          if (S3CON & S3TI)
 234   1          {
 235   2              S3CON &= ~S3TI;         //清除S3TI位
 236   2              busy = 0;               //清忙标志
 237   2          }
 238   1      }
 239          
 240          /*----------------------------
C51 COMPILER V9.60.0.0   UART                                                              12/16/2020 12:57:09 PAGE 5   

 241          发送串口数据
 242          ----------------------------*/
 243          void Uart3_SendData(BYTE dat)
 244          {
 245   1          while (busy);               //等待前面的数据发送完成
 246   1          ACC = dat;                  //获取校验位P (PSW.0)
 247   1          if (P)                      //根据P来设置校验位
 248   1          {
 249   2      #if (PARITYBIT == ODD_PARITY)
                      S3CON &= ~S3TB8;        //设置校验位为0
              #elif (PARITYBIT == EVEN_PARITY)
 252   2              S3CON |= S3TB8;         //设置校验位为1
 253   2      #endif
 254   2          }
 255   1          else
 256   1          {
 257   2      #if (PARITYBIT == ODD_PARITY)
                      S3CON |= S3TB8;         //设置校验位为1
              #elif (PARITYBIT == EVEN_PARITY)
 260   2              S3CON &= ~S3TB8;        //设置校验位为0
 261   2      #endif
 262   2          }
 263   1          busy = 1;
 264   1          S3BUF = ACC;                //写数据到UART3数据寄存器
 265   1      }
 266          
 267          /*----------------------------
 268          发送字符串
 269          ----------------------------*/
 270          void Uart3_SendString(char *s)
 271          {
 272   1          while (*s)                  //检测字符串结束标志
 273   1          {
 274   2              Uart3_SendData(*s++);         //发送当前字符
 275   2          }
 276   1      }
 277          
 278          /*---------------------------------------------------------------------*/
 279          void Uart4_init(void)
 280          {
 281   1          P_SW2 &= ~S4_S0;            //S4_S0=0 (P0.2/RxD4, P0.3/TxD4)
 282   1      //  P_SW2 |= S4_S0;             //S4_S0=1 (P5.2/RxD4_2, P5.3/TxD4_2)
 283   1      
 284   1      #if (PARITYBIT == NONE_PARITY)
                  S4CON = 0x10;               //8位可变波特率
              #elif (PARITYBIT == ODD_PARITY) || (PARITYBIT == EVEN_PARITY) || (PARITYBIT == MARK_PARITY)
 287   1          S4CON = 0x9a;               //9位可变波特率,校验位初始为1
 288   1      #elif (PARITYBIT == SPACE_PARITY)
                  S4CON = 0x92;               //9位可变波特率,校验位初始为0
              #endif
 291   1      
 292   1          T2L = (65536 - (FOSC/4/BAUD));   //设置波特率重装值
 293   1          T2H = (65536 - (FOSC/4/BAUD))>>8;
 294   1          AUXR = 0x14;                //T2为1T模式, 并启动定时器2
 295   1          IE2 = 0x10;                 //使能串口4中断
 296   1          EA = 1;
 297   1      }
 298          
 299          /*----------------------------
 300          UART4 中断服务程序
 301          -----------------------------*/
 302          void Uart4() interrupt 18 using 1
C51 COMPILER V9.60.0.0   UART                                                              12/16/2020 12:57:09 PAGE 6   

 303          {
 304   1          if (S4CON & S4RI)
 305   1          {
 306   2              S4CON &= ~S4RI;         //清除S4RI位
 307   2              P0 = S4BUF;             //P0显示串口数据
 308   2              P2 = (S4CON & S4RB8);   //P2.2显示校验位
 309   2          }
 310   1          if (S4CON & S4TI)
 311   1          {
 312   2              S4CON &= ~S4TI;         //清除S4TI位
 313   2              busy = 0;               //清忙标志
 314   2          }
 315   1      }
 316          
 317          /*----------------------------
 318          发送串口数据
 319          ----------------------------*/
 320          void Uart4_SendData(BYTE dat)
 321          {
 322   1          while (busy);               //等待前面的数据发送完成
 323   1          ACC = dat;                  //获取校验位P (PSW.0)
 324   1          if (P)                      //根据P来设置校验位
 325   1          {
 326   2      #if (PARITYBIT == ODD_PARITY)
                      S4CON &= ~S4TB8;        //设置校验位为0
              #elif (PARITYBIT == EVEN_PARITY)
 329   2              S4CON |= S4TB8;         //设置校验位为1
 330   2      #endif
 331   2          }
 332   1          else
 333   1          {
 334   2      #if (PARITYBIT == ODD_PARITY)
                      S4CON |= S4TB8;         //设置校验位为1
              #elif (PARITYBIT == EVEN_PARITY)
 337   2              S4CON &= ~S4TB8;        //设置校验位为0
 338   2      #endif
 339   2          }
 340   1          busy = 1;
 341   1          S4BUF = ACC;                //写数据到UART4数据寄存器
 342   1      }
 343          
 344          /*----------------------------
 345          发送字符串
 346          ----------------------------*/
 347          void Uart4_SendString(char *s)
 348          {
 349   1          while (*s)                  //检测字符串结束标志
 350   1          {
 351   2              Uart4_SendData(*s++);         //发送当前字符
 352   2          }
 353   1      }
 354          
 355          
 356          
 357          
 358          
 359          
 360          
 361          
 362          
 363          

C51 COMPILER V9.60.0.0   UART                                                              12/16/2020 12:57:09 PAGE 7   


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    493    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      12
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
